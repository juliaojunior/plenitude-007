"use client";
import ProtectedRoute from "@/components/ProtectedRoute";
import Navbar from "@/components/Navbar";
import { useAuth } from "@/contexts/AuthContext";
import Image from "next/image";
import { useState, useEffect } from "react";
import { Edit3, X, Check, User, Award, Trophy, Star, Clock, Calendar, Zap } from "lucide-react";
import { updateProfile } from "firebase/auth";
import { doc, updateDoc, setDoc, getDoc } from "firebase/firestore";
import { db } from "@/lib/firebase";

// Ícone para a seção Jornada
const IconJornada = () => (
  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z" />
  </svg>
);

// Ícone para a seção Conquistas
const IconConquistas = () => (
  <Trophy className="h-6 w-6 mr-2 text-yellow-400" />
);

// Lista de ícones de perfil disponíveis
const profileIcons = [
  "/profile-icons/icon_nature_leaf.png",
  "/profile-icons/icon_wave_calm.png",
  "/profile-icons/icon_mountain_peak.png",
  "/profile-icons/icon_sun_horizon.png",
  "/profile-icons/icon_starry_sky.png",
  "/profile-icons/icon_abstract_lines.png",
];

// Dados de exemplo para a jornada do usuário
const jornadaData = {
  diasConsecutivos: 7,
  meditacoesMes: 15,
  meditacoesAno: 42,
  meditacoesTotal: 42,
  minutosTotal: 630,
};

// Definição das conquistas disponíveis
const conquistasDefinicoes = [
  {
    id: "primeiros_passos",
    titulo: "Primeiros Passos",
    descricao: "Complete sua primeira meditação",
    icone: <Zap className="h-8 w-8 text-yellow-400" />,
    criterio: (jornada) => jornada.meditacoesTotal >= 1,
    nivel: "bronze"
  },
  {
    id: "habito_semanal",
    titulo: "Hábito Semanal",
    descricao: "Complete 7 meditações",
    icone: <Calendar className="h-8 w-8 text-yellow-400" />,
    criterio: (jornada) => jornada.meditacoesTotal >= 7,
    nivel: "bronze"
  },
  {
    id: "consistencia",
    titulo: "Consistência",
    descricao: "Medite por 3 dias consecutivos",
    icone: <Clock className="h-8 w-8 text-yellow-400" />,
    criterio: (jornada) => jornada.diasConsecutivos >= 3,
    nivel: "bronze"
  },
  {
    id: "dedicacao",
    titulo: "Dedicação",
    descricao: "Acumule 60 minutos de meditação",
    icone: <Star className="h-8 w-8 text-yellow-400" />,
    criterio: (jornada) => jornada.minutosTotal >= 60,
    nivel: "bronze"
  },
  {
    id: "praticante_regular",
    titulo: "Praticante Regular",
    descricao: "Complete 30 meditações",
    icone: <Award className="h-8 w-8 text-blue-400" />,
    criterio: (jornada) => jornada.meditacoesTotal >= 30,
    nivel: "prata"
  },
  {
    id: "rotina_diaria",
    titulo: "Rotina Diária",
    descricao: "Medite por 7 dias consecutivos",
    icone: <Calendar className="h-8 w-8 text-blue-400" />,
    criterio: (jornada) => jornada.diasConsecutivos >= 7,
    nivel: "prata"
  },
  {
    id: "hora_zen",
    titulo: "Hora Zen",
    descricao: "Acumule 300 minutos de meditação",
    icone: <Clock className="h-8 w-8 text-blue-400" />,
    criterio: (jornada) => jornada.minutosTotal >= 300,
    nivel: "prata"
  },
  {
    id: "mestre_meditacao",
    titulo: "Mestre da Meditação",
    descricao: "Complete 100 meditações",
    icone: <Trophy className="h-8 w-8 text-purple-400" />,
    criterio: (jornada) => jornada.meditacoesTotal >= 100,
    nivel: "ouro"
  },
  {
    id: "compromisso_diario",
    titulo: "Compromisso Diário",
    descricao: "Medite por 30 dias consecutivos",
    icone: <Calendar className="h-8 w-8 text-purple-400" />,
    criterio: (jornada) => jornada.diasConsecutivos >= 30,
    nivel: "ouro"
  },
  {
    id: "jornada_iluminada",
    titulo: "Jornada Iluminada",
    descricao: "Acumule 1000 minutos de meditação",
    icone: <Star className="h-8 w-8 text-purple-400" />,
    criterio: (jornada) => jornada.minutosTotal >= 1000,
    nivel: "ouro"
  }
];

// Componente de Conteúdo da Página de Perfil
function ProfilePageContent() {
  const { user } = useAuth();
  const [showIconPopup, setShowIconPopup] = useState(false);
  const [selectedIcon, setSelectedIcon] = useState("/user-placeholder.svg");
  
  // Estados para edição de nome
  const [showNameEdit, setShowNameEdit] = useState(false);
  const [newDisplayName, setNewDisplayName] = useState("");
  const [isUpdatingName, setIsUpdatingName] = useState(false);
  const [nameUpdateError, setNameUpdateError] = useState("");
  
  // Estado para conquistas
  const [conquistasDesbloqueadas, setConquistasDesbloqueadas] = useState([]);
  const [proximasConquistas, setProximasConquistas] = useState([]);
  const [showConquistaDetalhes, setShowConquistaDetalhes] = useState(null);

  // Efeito para carregar o ícone salvo do localStorage ao montar o componente
  useEffect(() => {
    const savedIcon = localStorage.getItem("userProfileIcon");
    if (savedIcon && profileIcons.includes(savedIcon)) {
      setSelectedIcon(savedIcon);
    }
    
    // Inicializa o campo de nome com o nome atual do usuário
    if (user?.displayName) {
      setNewDisplayName(user.displayName);
    }
    
    // Calcula conquistas desbloqueadas e próximas
    calcularConquistas();
  }, [user]);

  // Função para calcular conquistas desbloqueadas e próximas
  const calcularConquistas = () => {
    // Filtra conquistas desbloqueadas
    const desbloqueadas = conquistasDefinicoes.filter(conquista => 
      conquista.criterio(jornadaData)
    );
    
    // Filtra próximas conquistas (não desbloqueadas)
    const proximas = conquistasDefinicoes.filter(conquista => 
      !conquista.criterio(jornadaData)
    ).slice(0, 3); // Limita a 3 próximas conquistas
    
    setConquistasDesbloqueadas(desbloqueadas);
    setProximasConquistas(proximas);
  };

  // Função para lidar com a seleção de um novo ícone
  const handleIconSelect = (iconPath) => {
    setSelectedIcon(iconPath);
    localStorage.setItem("userProfileIcon", iconPath);
    setShowIconPopup(false);
  };
  
  // Função para atualizar o nome do usuário
  const handleUpdateDisplayName = async () => {
    if (!user || !newDisplayName.trim()) return;
    
    setIsUpdatingName(true);
    setNameUpdateError("");
    
    try {
      // Atualiza o displayName no objeto de autenticação do Firebase
      await updateProfile(user, { displayName: newDisplayName.trim() });
      
      // Verifica se o documento do usuário existe no Firestore
      const userDocRef = doc(db, "users", user.uid);
      const userDocSnap = await getDoc(userDocRef);
      
      if (userDocSnap.exists()) {
        // Se o documento existe, atualiza o nome
        await updateDoc(userDocRef, {
          displayName: newDisplayName.trim()
        });
      } else {
        // Se o documento não existe, cria um novo com o nome
        await setDoc(userDocRef, {
          displayName: newDisplayName.trim(),
          email: user.email,
          role: "user", // Define o papel padrão como "user"
          createdAt: new Date().toISOString()
        });
      }
      
      // Fecha o modal de edição
      setShowNameEdit(false);
    } catch (error) {
      console.error("Erro ao atualizar nome:", error);
      setNameUpdateError("Não foi possível atualizar o nome. Tente novamente.");
    } finally {
      setIsUpdatingName(false);
    }
  };
  
  // Função para renderizar a cor de fundo baseada no nível da conquista
  const getBgColorByLevel = (nivel) => {
    switch(nivel) {
      case "bronze": return "from-amber-700 to-yellow-600";
      case "prata": return "from-slate-400 to-blue-400";
      case "ouro": return "from-yellow-500 to-amber-300";
      default: return "from-gray-700 to-gray-600";
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-blue-900 text-white">
      <main className="max-w-4xl mx-auto px-4 py-8 space-y-8">
        {/* Cabeçalho do Perfil */}
        <div className="bg-gray-800 bg-opacity-70 p-6 md:p-8 rounded-xl shadow-2xl text-center transform transition-all hover:scale-[1.01] duration-300">
          <h1 className="text-3xl md:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500 mb-8">
            Meu Perfil
          </h1>
          {/* Imagem de Perfil Circular com Botão de Edição */}
          <div className="relative mx-auto mb-6 w-32 h-32 md:w-40 md:h-40">
            <div className="rounded-full overflow-hidden border-4 border-blue-500 shadow-lg bg-gray-700 flex items-center justify-center w-full h-full">
              <Image 
                src={selectedIcon} 
                alt="Foto do Perfil" 
                width={160} 
                height={160} 
                className="object-cover w-full h-full"
                priority
                key={selectedIcon}
              />
            </div>
            <button
              onClick={() => setShowIconPopup(true)}
              className="absolute bottom-0 right-0 bg-purple-600 hover:bg-purple-700 text-white p-2 rounded-full shadow-md transition-transform transform hover:scale-110"
              aria-label="Editar ícone de perfil"
            >
              <Edit3 size={18} />
            </button>
          </div>
          
          {/* Nome do Usuário com Botão de Edição */}
          {!showNameEdit && user?.displayName && (
            <div className="flex items-center justify-center mb-2">
              <h2 className="text-2xl font-semibold text-gray-100">
                {user.displayName}
              </h2>
              <button
                onClick={() => setShowNameEdit(true)}
                className="ml-2 text-blue-400 hover:text-blue-300 p-1 rounded-full hover:bg-gray-700 transition-colors"
                aria-label="Editar nome"
              >
                <Edit3 size={16} />
              </button>
            </div>
          )}
          
          {/* Formulário de Edição de Nome */}
          {showNameEdit && (
            <div className="mb-4 max-w-xs mx-auto">
              <div className="flex items-center bg-gray-700 rounded-lg overflow-hidden shadow-inner">
                <User size={18} className="text-gray-400 ml-3" />
                <input
                  type="text"
                  value={newDisplayName}
                  onChange={(e) => setNewDisplayName(e.target.value)}
                  className="bg-gray-700 text-white px-3 py-2 w-full focus:outline-none"
                  placeholder="Seu nome"
                  disabled={isUpdatingName}
                />
                <button
                  onClick={handleUpdateDisplayName}
                  disabled={isUpdatingName || !newDisplayName.trim()}
                  className="bg-blue-600 hover:bg-blue-700 text-white p-2 disabled:opacity-50 disabled:cursor-not-allowed"
                  aria-label="Salvar nome"
                >
                  {isUpdatingName ? (
                    <span className="animate-pulse">...</span>
                  ) : (
                    <Check size={18} />
                  )}
                </button>
                <button
                  onClick={() => {
                    setShowNameEdit(false);
                    setNewDisplayName(user?.displayName || "");
                    setNameUpdateError("");
                  }}
                  className="bg-gray-600 hover:bg-gray-700 text-white p-2"
                  aria-label="Cancelar edição"
                  disabled={isUpdatingName}
                >
                  <X size={18} />
                </button>
              </div>
              {nameUpdateError && (
                <p className="text-red-400 text-sm mt-1">{nameUpdateError}</p>
              )}
            </div>
          )}
          
          {/* Email do Usuário */}
          <p className="text-gray-300 text-md mb-6">
            {user?.email}
          </p>
        </div>
        
        {/* Seção Conquistas e Medalhas */}
        <section className="bg-gray-800 bg-opacity-70 p-6 md:p-8 rounded-xl shadow-2xl w-full transform transition-all hover:scale-[1.02] duration-300">
          <h2 className="text-2xl font-semibold text-gray-100 mb-6 border-b-2 border-yellow-500 pb-3 flex items-center">
            <IconConquistas />
            Conquistas e Medalhas
          </h2>
          
          {/* Conquistas Desbloqueadas */}
          <div className="mb-8">
            <h3 className="text-xl font-semibold text-yellow-300 mb-4">Suas Conquistas</h3>
            
            {conquistasDesbloqueadas.length === 0 ? (
              <p className="text-gray-400 italic">Você ainda não desbloqueou nenhuma conquista. Continue meditando!</p>
            ) : (
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                {conquistasDesbloqueadas.map((conquista) => (
                  <div 
                    key={conquista.id}
                    onClick={() => setShowConquistaDetalhes(conquista)}
                    className={`bg-gradient-to-br ${getBgColorByLevel(conquista.nivel)} p-4 rounded-lg shadow-lg text-center cursor-pointer transform transition-all hover:scale-105 duration-300`}
                  >
                    <div className="bg-gray-900 bg-opacity-30 rounded-full p-3 mx-auto mb-2 w-16 h-16 flex items-center justify-center">
                      {conquista.icone}
                    </div>
                    <h4 className="font-semibold text-white">{conquista.titulo}</h4>
                  </div>
                ))}
              </div>
            )}
          </div>
          
          {/* Próximas Conquistas */}
          <div>
            <h3 className="text-xl font-semibold text-blue-300 mb-4">Próximas Conquistas</h3>
            
            {proximasConquistas.length === 0 ? (
              <p className="text-gray-400 italic">Parabéns! Você desbloqueou todas as conquistas disponíveis.</p>
            ) : (
              <div className="space-y-3">
                {proximasConquistas.map((conquista) => (
                  <div 
                    key={conquista.id}
                    className="bg-gray-700 bg-opacity-50 p-4 rounded-lg shadow flex items-center"
                  >
                    <div className="bg-gray-800 rounded-full p-2 mr-4">
                      {conquista.icone}
                    </div>
                    <div>
                      <h4 className="font-semibold text-white">{conquista.titulo}</h4>
                      <p className="text-gray-300 text-sm">{conquista.descricao}</p>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </section>
        
        {/* Seção Sua Jornada */}
        <section className="bg-gray-800 bg-opacity-70 p-6 md:p-8 rounded-xl shadow-2xl w-full transform transition-all hover:scale-[1.02] duration-300">
          <h2 className="text-2xl font-semibold text-gray-100 mb-6 border-b-2 border-purple-500 pb-3 flex items-center">
            <IconJornada />
            Sua Jornada
          </h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-gray-300">
            <div className="bg-gray-700 bg-opacity-50 p-4 rounded-lg shadow">
              <p className="text-sm text-purple-300">Dias Consecutivos</p>
              <p className="text-2xl font-bold text-white">{jornadaData.diasConsecutivos}</p>
            </div>
            <div className="bg-gray-700 bg-opacity-50 p-4 rounded-lg shadow">
              <p className="text-sm text-purple-300">Meditações no Mês</p>
              <p className="text-2xl font-bold text-white">{jornadaData.meditacoesMes}</p>
            </div>
            <div className="bg-gray-700 bg-opacity-50 p-4 rounded-lg shadow">
              <p className="text-sm text-purple-300">Meditações no Ano</p>
              <p className="text-2xl font-bold text-white">{jornadaData.meditacoesAno}</p>
            </div>
            <div className="bg-gray-700 bg-opacity-50 p-4 rounded-lg shadow">
              <p className="text-sm text-purple-300">Total de Meditações</p>
              <p className="text-2xl font-bold text-white">{jornadaData.meditacoesTotal}</p>
            </div>
            <div className="sm:col-span-2 bg-gray-700 bg-opacity-50 p-4 rounded-lg shadow">
              <p className="text-sm text-purple-300">Minutos Totais de Meditação</p>
              <p className="text-2xl font-bold text-white">{jornadaData.minutosTotal.toLocaleString("pt-BR")} min</p>
            </div>
          </div>
        </section>
      </main>
      
      {/* Popup de Seleção de Ícone */}
      {showIconPopup && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
          <div className="bg-gray-800 p-6 rounded-lg shadow-xl max-w-sm w-full">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-semibold text-white">Escolha seu Ícone</h3>
              <button onClick={() => setShowIconPopup(false)} className="text-gray-400 hover:text-white">
                <X size={24} />
              </button>
            </div>
            <div className="grid grid-cols-3 gap-4">
              {profileIcons.map((iconSrc) => (
                <button
                  key={iconSrc}
                  onClick={() => handleIconSelect(iconSrc)}
                  className={`p-2 rounded-lg hover:bg-purple-700 transition-colors ${selectedIcon === iconSrc ? "bg-purple-600 ring-2 ring-purple-400" : "bg-gray-700"}`}
                  aria-label={`Selecionar ícone ${iconSrc.split("/").pop()?.split(".")[0].replace("icon_", "").replace("_", " ")}`}
                >
                  <Image src={iconSrc} alt={`Ícone ${iconSrc}`} width={64} height={64} className="rounded-full mx-auto" />
                </button>
              ))}
            </div>
          </div>
        </div>
      )}
      
      {/* Popup de Detalhes da Conquista */}
      {showConquistaDetalhes && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
          <div className={`bg-gradient-to-br ${getBgColorByLevel(showConquistaDetalhes.nivel)} p-1 rounded-lg shadow-xl max-w-md w-full`}>
            <div className="bg-gray-800 p-6 rounded-lg w-full h-full">
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-2xl font-semibold text-white">Conquista Desbloqueada</h3>
                <button onClick={() => setShowConquistaDetalhes(null)} className="text-gray-400 hover:text-white">
                  <X size={24} />
                </button>
              </div>
              
              <div className="text-center mb-6">
                <div className="bg-gray-900 bg-opacity-30 rounded-full p-4 mx-auto mb-4 w-24 h-24 flex items-center justify-center">
                  {showConquistaDetalhes.icone}
                </div>
                <h4 className="text-xl font-bold text-white mb-2">{showConquistaDetalhes.titulo}</h4>
                <p className="text-gray-300">{showConquistaDetalhes.descricao}</p>
              </div>
              
              <div className="text-center">
                <div className={`inline-block px-4 py-2 rounded-full text-sm font-semibold capitalize ${
                  showConquistaDetalhes.nivel === "bronze" ? "bg-amber-700 text-yellow-100" :
                  showConquistaDetalhes.nivel === "prata" ? "bg-slate-400 text-white" :
                  "bg-yellow-500 text-yellow-900"
                }`}>
                  Medalha de {showConquistaDetalhes.nivel}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      <Navbar />
    </div>
  );
}

export default function ProfilePage() {
  return (
    <ProtectedRoute>
      <ProfilePageContent />
    </ProtectedRoute>
  );
}
